<?php

namespace common\models;

use Yii;
use yii\db\Query;

/**
 * This is the model class for table "subscribe".
 *
 * @property int $id
 * @property string $name
 * @property string $email
 * @property int $status
 * @property int $period
 * @property int $created_at
 *
 * @property SubscribeSection[] $subscribeSections
 * @property SubscribeTag[] $subscribeTags
 */
class Subscribe extends BaseModel
{
    const SUBSCRIBE_PERIOD_ONE_DAY = 1;
    const SUBSCRIBE_PERIOD_ONE_WEEK = 2;
    const SUBSCRIBE_PERIOD_ONE_MONTH = 3;

    const STATUS_ACTIVE = 0;
    const STATUS_DISABLED = 1;

    protected static $statuses = [
        self::STATUS_ACTIVE   => 'Active',
        self::STATUS_DISABLED => 'Disabled',
    ];

    protected static $periods = [
        self::SUBSCRIBE_PERIOD_ONE_DAY   => 'One day',
        self::SUBSCRIBE_PERIOD_ONE_WEEK  => 'One week',
        self::SUBSCRIBE_PERIOD_ONE_MONTH => 'One month',
    ];

    public $tagList;
    public $sectionList;

    /**
     * @return array
     */
    public static function getPeriodListData()
    {
        return static::$periods;
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'subscribe';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'email'], 'required'],
            [['status', 'period', 'created_at'], 'integer'],
            [['name', 'email'], 'string', 'max' => 255],
            [['email'], 'unique'],
            ['email', 'email'],
            [['sectionList'], 'validateTagsAndSections', 'skipOnEmpty' => false],
        ];
    }

    public function validateTagsAndSections($attribute, $params)
    {
        if (empty($this->tagList) && empty($this->sectionList)) {
            $this->addError($attribute, 'Select some Tag(s) or Section(s)');
        }
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id'         => 'ID',
            'name'       => 'Name',
            'email'      => 'Email',
            'status'     => 'Status',
            'period'     => 'Period',
            'created_at' => 'Created At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSections()
    {
        return $this->hasMany(Section::class, ['id' => 'section_id'])->viaTable('subscribe_section', ['subscribe_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])->viaTable('subscribe_tag', ['subscribe_id' => 'id']);
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($insert)
            $this->created_at = time();

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws \yii\db\Exception
     */
    public function afterSave($insert, $changedAttributes)
    {
        $this->syncTags();
        $this->syncSections();

        parent::afterSave($insert, $changedAttributes);
    }

    /**
     * @throws \yii\db\Exception
     */
    public function syncTags()
    {
        $ex = (new Query())
            ->select('tag_id')
            ->from('subscribe_tag')
            ->where(['subscribe_id' => $this->id])
            ->column();

        if (!$this->tagList)
            $this->tagList = [];

        $to_delete = array_diff($ex, $this->tagList);
        $to_add = array_diff($this->tagList, $ex);

        if (is_array($to_delete))
            Yii::$app->db->createCommand()->delete('subscribe_tag', ['subscribe_id' => $this->id, 'tag_id' => $to_delete])->execute();

        if (is_array($to_add)) {
            $toInsert = null;

            foreach ($to_add as $tagId) {
                if ($tagId)
                    $toInsert[] = [
                        $this->id,
                        $tagId
                    ];
            }

            //insert new sections
            if ($toInsert)
                \Yii::$app->db->createCommand()->batchInsert('subscribe_tag', ['subscribe_id', 'tag_id'], $toInsert)->execute();
        }
    }

    /**
     * @throws \yii\db\Exception
     */
    public function syncSections()
    {
        $ex = (new Query())
            ->select('section_id')
            ->from('subscribe_section')
            ->where(['subscribe_id' => $this->id])
            ->column();

        if (!$this->sectionList)
            $this->sectionList = [];

        $to_delete = array_diff($ex, $this->sectionList);
        $to_add = array_diff($this->sectionList, $ex);

        if (is_array($to_delete))
            Yii::$app->db->createCommand()->delete('subscribe_section', ['subscribe_id' => $this->id, 'section_id' => $to_delete])->execute();

        if (is_array($to_add)) {
            $toInsert = null;

            foreach ($to_add as $sectionId) {
                if ($sectionId)
                    $toInsert[] = [
                        $this->id,
                        $sectionId
                    ];
            }

            //insert new sections
            if ($toInsert)
                \Yii::$app->db->createCommand()->batchInsert('subscribe_section', ['subscribe_id', 'section_id'], $toInsert)->execute();
        }
    }

}
